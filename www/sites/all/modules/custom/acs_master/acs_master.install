<?php

/**
 * @file
 * Runs the set up procedures as required by the ACS Master module.
 */

/**
 * Returns an array containing all modules enabled in ACS Master.
 *
 * Modules are listed in proper order (based on dependencies) for enabling.
 * Array will be updated each time a new module is added to project.
 */
function _acs_master_all_modules() {
  // 1. Create array listing all modules.
  $arr_modules_ALL = array(
    // Core modules.
    'aggregator',
    'blog',
    'contact',
    'dblog',
    'field_ui',
    'file',
    'forum',
    'image',
    'menu',
    'search',
    // Contrib modules.
    'backup_migrate',
    'devel',
    'features',
    'ctools',
    'date',
    'views',
    'strongarm',
    // 'features_extra', (8/11: removed for now).
    'token',
    'pathauto',
    'webform',
    // Feature modules.
    'roles_permissions',
    'taxonomy_vocabularies',
    'link',
    'resource_content',
  );
  // 2. Return array as function output.
  return $arr_modules_ALL;
}

/**
 * Enables each module listed within the passed array and returns confirmation.
 *
 * @param array $arr_modules
 *    Array of module machine names to be enabled.
 *
 * @return array $result
 *   2 element array with message for error handling:
 *   - If all modules were enabled correctly, then the 1st element will be TRUE
 *   and the 2nd element will contain the success confirmation string.
 *   - If an error occurs, then the 1st element will be FALSE and the 2nd
 *   element will contain an error message detailing which module failed to
 *   enable.
 */
function _acs_master_enable_modules($arr_modules) {
  // 1. Initialize variable to catch result of "enable_module".
  $result = NULL;

  // 2. Loop through input array and enable each module individually.
  foreach ($arr_modules as $module_name) {
    // 2.1 Enable module and store TRUE/FALSE return for error handling.
    $result = module_enable(array($module_name));
    // 2.2 Return error message and exit if "module_enable" fails.
    if (!$result) {
      // If FALSE, store $result and error message in return array. Exit.
      return array(
        $result,
        // Create error message using "t" and placeholder.
        t("Failed to enable !module", array('!module' => $module_name)),
      );
    } // End if statement.
  } // End for loop.

  // 3. If all modules were enabled successfully, return confirmation message.
  return array(
    $result,
    // Use "implode" to convert array elements into a string of module names.
    t("Enabled !module", array('!module' => implode(",", $arr_modules))),
  );
}

/**
 * Creates/Saves Taxonomy Terms inside passed array.
 *
 * @param array $arr_terms
 *    Array contains nested array of terms identified by matching Vocab Key.
 */
function _acs_master_save_taxonomy_terms($arr_terms) {
  // 1. Loop through main array by using the Vocab Key as Index.
  foreach ($arr_terms as $key_vocab => $arr_vocabterms) {
    // 1.1 Then loop through each nested array of terms.
    foreach ($arr_vocabterms as $name_term) {
      // 1.1.a Get the Vocabulary Object using the Vocab Key "machine name".
      $obj_vocab = taxonomy_vocabulary_machine_name_load($key_vocab);

      // 1.1.b Check if term already exists under this vocabulary object.
      $match_term = taxonomy_get_term_by_name($name_term, $obj_vocab->machine_name);

      // 1.1.c If term doesn't exist, add.
      if (empty($match_term)) {
        // Create new term object.
        $obj_term = new stdClass();
        // Set Term object's vid to match Vocab object's vid.
        $obj_term->vid = $obj_vocab->vid;
        // Set Term object's name as current term.
        $obj_term->name = $name_term;
        // Save/add term.
        taxonomy_term_save($obj_term);
        // Print the  created term for verification.
        echo '' . PHP_EOL;
        echo 'Created Term ', $name_term, 'under Vocab ', $key_vocab . PHP_EOL;
      }
      // 1.1.d If term does exit, print verification.
      else {
        echo '' . PHP_EOL;
        echo 'The Term ', $name_term, ' already exists' . PHP_EOL;
      }
    } // End for.
  } // End for.
}

/**
 * Implements hook_install().
 *
 * This function runs the first time this module ACS Master is enabled.
 * It enables all the required modules and returns a confirmation message.
 */
function acs_master_install() {
  // 1. Call function to return array listing all modules.
  $arr_modules_ALL = _acs_master_all_modules();

  // 2. Enable each module by passing array to the helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules_ALL);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    echo $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new Exception($msg[2]);
  } // End if statement.

  // 4. Save the "Visitor Type" and "Resources" Taxonomy Terms.
  // 4.1. Create 2D array of 2 nested array of Terms with matching Vocab keys.
  $arr_terms = array(
    // 4.1.a First nested array of Key 'Visitor Type'.
    'visitor_type' => array(
      'Parents',
      'Teachers',
      'Caregivers',
      'People with AS',
    ),
    // 4.1.b Second nested array of Key 'Resources'.
    'resources' => array(
      'Resources for Parents',
      'Resources for Teachers',
      'Resources for Caregivers',
      'Resources for People with AS',
    ),
  );
  // 4.2 Save the taxonomy terms by passing to helper function.
  _acs_master_save_taxonomy_terms($arr_terms);
}

/**
 * Implements hook_uninstall().
 *
 * This function disables all the modules enabled in acs_master_install.
 */
function acs_master_uninstall() {
  // 1. Call function to return array listing all modules.
  $arr_modules_ALL = _acs_master_all_modules();

  // 2. Reverse the order of array for disabling.
  $arr_reverse = array_reverse($arr_modules_ALL);

  // 3. Disable each module in the reversed array.
  module_disable($arr_reverse);
}

/**
 * Implements hook_update_N().
 *
 * Enables the following Core modules:
 * aggregator, blog, contact, database_logging, field_UI, file, forum,
 * image, menu, and search.
 *
 * Enables the following Contrib modules:
 * backup_migrate, ctools, date, devel, features, features_extra, pathauto,
 * strongarm, token, views, webform.
 */
function acs_master_update_7100() {
  // 1. Create an array listing all module names for this update.
  $arr_modules = array(
    // Core modules.
    'aggregator',
    'blog',
    'contact',
    'dblog',
    'field_ui',
    'file',
    'forum',
    'image',
    'menu',
    'search',
    // Contrib modules.
    'backup_migrate',
    'devel',
    'features',
    'ctools',
    'date',
    'views',
    'strongarm',
    // 'features_extra', (8/11: removed for now).
    'token',
    'pathauto',
    'webform',
  );

  // 2. Enable each module in the array by passing to helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    return $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new DrupalUpdateException($msg[2]);
  } // End if statement.
}

/**
 * Implements hook_update_N().
 *
 * Enables the following Feature module: Roles & Permissions.
 */
function acs_master_update_7101() {
  // 1. Create an array listing all module names for this update.
  $arr_modules = array(
    'roles_permissions',
  );

  // 2. Enable each module in the array by passing to helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    return $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new DrupalUpdateException($msg[2]);
  } // End if statement.
}

/**
 * Implements hook_update_N().
 *
 * Enables the following Feature module: Taxonomy Vocabularies.
 */
function acs_master_update_7102() {
  // 1. Create an array listing all module names for this update.
  $arr_modules = array(
    'taxonomy_vocabularies',
  );

  // 2. Enable each module in the array by passing to helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    return $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new DrupalUpdateException($msg[2]);
  } // End if statement.
}

/**
 * Implements hook_update_N().
 *
 * Saves the Taxonomy Terms associated with Resource and Visitor Type Vocabs.
 */
function acs_master_update_7103() {
  // 1. Create 2D array of 2 nested array of Terms with their matching Taxonomy.
  // Vocabs as Keys.
  $arr_terms = array(
    // 1.1 First nested array of Key 'Visitor Type'.
    'visitor_type' => array(
      'Parents',
      'Teachers',
      'Caregivers',
      'People with AS',
    ),
    // 1.2 Second nested array of Key 'Resources'.
    'resources' => array(
      'Resources for Parents',
      'Resources for Teachers',
      'Resources for Caregivers',
      'Resources for People with AS',
    ),
  );

  // 2. Save the taxonomy terms by passing to helper function.
  _acs_master_save_taxonomy_terms($arr_terms);
}

/**
 * Implements hook_update_N().
 *
 * Enables the following modules: Link, Resource Content.
 */
function acs_master_update_7104() {
  // 1. Create an array listing all module names for this update.
  $arr_modules = array(
    'link',
    'resource_content',
  );

  // 2. Enable each module in the array by passing to helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    return $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new DrupalUpdateException($msg[2]);
  } // End if statement.
}
