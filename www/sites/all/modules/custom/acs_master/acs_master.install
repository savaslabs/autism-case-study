<?php

/**
 * @file
 * Runs the set up procedures as required by the ACS Master module.
 */

/**
 * Returns an array containing all modules enabled in ACS Master.
 *
 * Modules are listed in proper order (based on dependencies) for enabling.
 * Array will be updated each time a new module is added to project.
 */
function _acs_master_all_modules() {
  // 1. Create array listing all modules.
  $arr_modules_ALL = array(
    // Core modules.
    'aggregator',
    'blog',
    'contact',
    'dblog',
    'field_ui',
    'file',
    'forum',
    'image',
    'menu',
    'search',
    // Contrib modules.
    'backup_migrate',
    'devel',
    'features',
    'ctools',
    'date',
    'views',
    'strongarm',
    // 'features_extra', (8/11: removed for now).
    'token',
    'pathauto',
    'webform',
    // Feature modules.
    'roles_permissions',
    'taxonomy_vocabularies',
  );
  // 2. Return array as function output.
  return $arr_modules_ALL;
}

/**
 * Enables each module listed within the passed array and returns confirmation.
 *
 * Function returns a 2 element array for error handling:
 * - If all modules were enabled correctly, then the 1st element will be TRUE
 * and the 2nd element will contain the success confirmation string.
 * - If an error occurs, then the 1st element will be FALSE and the 2nd element
 * will contain an error message detailing which module failed to enable.
 */
function _acs_master_enable_modules($arr_modules) {
  // 1. Initialize variable to catch result of "enable_module".
  $result = NULL;

  // 2. Loop through input array and enable each module individually.
  foreach ($arr_modules as $module_name) {
    // 2.1 Enable module and store TRUE/FALSE return for error handling.
    $result = module_enable(array($module_name));
    // 2.2 Return error message and exit if "module_enable" fails.
    if (!$result) {
      // If FALSE, store $result and error message in return array. Exit.
      return array(
        $result,
        // Create error message using "t" and placeholder.
        t("Failed to enable !module", array('!module' => $module_name)),
      );
    } // End if statement.
  } // End for loop.

  // 3. If all modules were enabled successfully, return confirmation message.
  return array(
    $result,
    // Use "implode" to convert array elements into a string of module names.
    t("Enabled !module", array('!module' => implode(",", $arr_modules))),
  );
}

/**
 * Implements hook_install().
 *
 * This function runs the first time this module ACS Master is enabled.
 * It enables all the required modules and returns a confirmation message.
 */
function acs_master_install() {
  // 1. Call function to return array listing all modules.
  $arr_modules_ALL = _acs_master_all_modules();

  // 2. Enable each module by passing array to the helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules_ALL);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    return $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new Exception($msg[2]);
  } // End if statement.
}

/**
 * Implements hook_uninstall().
 *
 * This function disables all the modules enabled in acs_master_install.
 */
function acs_master_uninstall() {
  // 1. Call function to return array listing all modules.
  $arr_modules_ALL = _acs_master_all_modules();

  // 2. Reverse the order of array for disabling.
  $arr_reverse = array_reverse($arr_modules_ALL);

  // 3. Disable each module in the reversed array.
  module_disable($arr_reverse);
}

/**
 * Implements hook_update_N().
 *
 * Enables the following Core modules:
 * aggregator, blog, contact, database_logging, field_UI, file, forum,
 * image, menu, and search.
 *
 * Enables the following Contrib modules:
 * backup_migrate, ctools, date, devel, features, features_extra, pathauto,
 * strongarm, token, views, webform.
 */
function acs_master_update_7100() {
  // 1. Create an array listing all module names for this update.
  $arr_modules = array(
    // Core modules.
    'aggregator',
    'blog',
    'contact',
    'dblog',
    'field_ui',
    'file',
    'forum',
    'image',
    'menu',
    'search',
    // Contrib modules.
    'backup_migrate',
    'devel',
    'features',
    'ctools',
    'date',
    'views',
    'strongarm',
    // 'features_extra', (8/11: removed for now).
    'token',
    'pathauto',
    'webform',
  );

  // 2. Enable each module in the array by passing to helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    return $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new DrupalUpdateException($msg[2]);
  } // End if statement.
}

/**
 * Implements hook_update_N().
 *
 * Enables the following Feature module: Roles & Permissions.
 */
function acs_master_update_7101() {
  // 1. Create an array listing all module names for this update.
  $arr_modules = array(
    'roles_permissions',
  );

  // 2. Enable each module in the array by passing to helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    return $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new DrupalUpdateException($msg[2]);
  } // End if statement.
}

/**
 * Implements hook_update_N().
 *
 * Enables the following Feature module: Taxonomy Vocabularies.
 */
function acs_master_update_7102() {
  // 1. Create an array listing all module names for this update.
  $arr_modules = array(
    'taxonomy_vocabularies',
  );

  // 2. Enable each module in the array by passing to helper function.
  // Store results in $msg for confirmation and error handling.
  $msg = _acs_master_enable_modules($arr_modules);

  // 3. Print confirmation message or throw exception if process unsuccessful.
  if ($msg[1]) {
    // 3.1 If $msg[1] = TRUE, then print confirmation string in 2nd element.
    return $msg[2];
  }
  else {
    // 3.2 If $msg[1] = FALSE, then print error message and throw Exception.
    throw new DrupalUpdateException($msg[2]);
  } // End if statement.

  // 4. Save the taxonomy terms associated with each vocabulary type.
  // 4.1 Create array of Visitor Type Terms.
  $arr_terms = array(
    'Parents',
    'Teachers',
    'Caregivers',
    'People with AS',
  );
  // 4.2 Loop through each term to get vid and save.
  foreach ($arr_terms as $term_name) {
    // 4.2.a Get term vid.
    $vid = db_query("SELECT vid FROM $term_name");
    // 4.2.b Save term using name and vid.
    $term = array(
      $term_name,
      $vid,
    );
    taxonomy_term_save($term);
  }
}
